{"version":3,"sources":["Details.jsx","SearchBar.jsx","App.js","Routes.jsx","reportWebVitals.js","index.js"],"names":["Details","props","history","useHistory","movieitemlist","useLocation","state","className","Button","variant","style","margin","onClick","push","Table","striped","bordered","hover","responsive","size","src","process","image","alt","name","synopsisShort","productionYear","genre","synopsis","SearchBar","Form","Group","controlId","Label","Control","as","onChange","handleChange","handleSearch","App","moviearray","useState","items","setItems","filteredMovies","setFilteredMovies","error","setError","isLoaded","setIsLoaded","itemclicked","setItemClicked","val","setval","length","listItems","map","item","index","movieList","handleClick","getMovieRequest","a","fetch","response","json","result","useEffect","e","target","value","Year","Genre","filteredarray","_","filter","obj","Number","Routes","console","log","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7285677f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './App.css';\r\nimport { Button } from 'react-bootstrap';\r\nimport {useHistory,useLocation} from \"react-router-dom\";\r\nimport Table from 'react-bootstrap/Table';\r\nconst Details = (props) => {\r\n \r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const movieitemlist = location.state.movieitemlist; // to get the details of movie that is clicked\r\n   \r\n  \r\n\r\n \r\n\r\n    const Home = () =>\r\n    {   \r\n   \r\n\r\n        history.push('/')\r\n   \r\n\r\n    }\r\n    return (\r\n       \r\n\r\n        <div className=\"MovieList\">\r\n        \r\n      \r\n        <Button variant=\"primary\"style={{margin:'20px'}} onClick={Home}>Home</Button> \r\n        \r\n\r\n<Table striped bordered hover responsive=\"sm\"  size=\"sm\" >\r\n  <thead>\r\n \r\n  </thead>\r\n  <tbody>\r\n <tr>\r\n <td> <img src={process.env.PUBLIC_URL + \"/images/\"+ movieitemlist.image} alt=\"moviedetails\"/></td>\r\n </tr>\r\n    <tr>\r\n  \r\n      <td><b>Name</b></td>\r\n      <td>{movieitemlist.name}</td>\r\n      \r\n     \r\n    </tr>\r\n    <tr>\r\n     \r\n      <td><b>Short Synopsis</b></td>\r\n      <td>{movieitemlist.synopsisShort}</td>\r\n     \r\n    </tr>\r\n    <tr>\r\n      <td><b>Year</b></td>\r\n      <td>{movieitemlist.productionYear}</td>\r\n    </tr>\r\n    <tr>\r\n      <td><b>Genre</b></td>\r\n      <td>{movieitemlist.genre}</td>\r\n     \r\n    </tr>\r\n    <tr>\r\n      <td><b>Synopsis</b></td>\r\n      <td>{movieitemlist.synopsis}</td>\r\n     \r\n    </tr>\r\n  </tbody>\r\n</Table>\r\n      \r\n\r\n\r\n\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Details;","import React from \"react\";\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button';\r\nconst SearchBar = (props) =>\r\n{\r\n\r\n    return (\r\n\r\n        <div>\r\n            <Form className=\"Dropdown\" >\r\n<Form.Group controlId=\"yearId\">\r\n    <Form.Label>Select Year</Form.Label> \r\n    <Form.Control as=\"select\"  name=\"Year\" onChange={props.handleChange}   >\r\n <option></option>\r\n      <option>2020</option>\r\n      <option>2019</option>\r\n      <option>2018</option>\r\n      <option>2017</option>\r\n      <option>2016</option>\r\n      <option>2015</option>\r\n      <option>2014</option>\r\n      <option>2013</option>\r\n      <option>2012</option>\r\n      <option>2011</option>\r\n      <option>2010</option>\r\n      <option>2009</option>\r\n      <option>2008</option>\r\n      <option>2007</option>\r\n      <option>2006</option>\r\n      <option>2005</option>\r\n      <option>2004</option>\r\n      <option>2003</option>\r\n      <option>2002</option>\r\n      <option>2001</option>\r\n      <option>2000</option>\r\n     \r\n    </Form.Control>\r\n\r\n  </Form.Group>\r\n \r\n<Form.Group controlId=\"GenreId\" >\r\n    <Form.Label>Select Genre</Form.Label> \r\n    <Form.Control as=\"select\"  name=\"Genre\" onChange={props.handleChange} >\r\n   \r\n    <option></option>\r\n      <option>Action</option>\r\n      <option>Fantasy</option>\r\n      <option>Animation</option>\r\n      <option>Comedy</option>\r\n      <option>Adventure</option>\r\n    </Form.Control>\r\n  </Form.Group>\r\n  <Button variant=\"primary\" onClick={props.handleSearch}>\r\n    Search\r\n  </Button>\r\n \r\n</Form>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\nexport default SearchBar;","\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useState } from 'react';\nimport {useEffect} from 'react';\nimport { useHistory} from \"react-router-dom\";\n\nimport _ from 'lodash';\nimport SearchBar from './SearchBar';\n\n\n\n\nconst App=()=> {\n  const [items, setItems] = useState([]);//list of movies from the API\n  const [filteredMovies, setFilteredMovies] =useState([]);//filtered movie list\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [itemclicked, setItemClicked] = useState(false);//for conditioonal rendering\n  const [val, setval] = useState(\"\");//for search criteria\n  //\n\n\n \n  const history = useHistory();\n\n  const handleClick = (index,movieList) =>\n  {   \n    \n    \nhistory.push('/details',{movieitemlist:movieList[index]});// pass the movie list as props \n\n  }\n  const handleChange = (e) => // for search criteria\n  {\n  \n   \n    setval(val => ({...val, [e.target.name]: e.target.value}));//merge the values using spread operator in hook\n     \n\n    \n  }\n  \n  const handleSearch=(e)=>//trigerred when search button is clicked\n  {  \n    \n    setItemClicked(true); \n\n    //using lodash to get the filterd movie based on  search criteria\nif((val.Year) && (val.Genre))\n{\n  var filteredarray = _.filter(items, function(obj) { return obj.productionYear===Number(val.Year) && obj.genre===(val.Genre )});\n  setFilteredMovies(filteredarray)\n}\n\nelse if(val.Genre)\n{\n  filteredarray = _.filter(items, function(obj) {return obj.genre===(val.Genre )});\n\n     setFilteredMovies(filteredarray)\n}\n\nelse if(val.Year)\n{\n\n filteredarray = _.filter(items, function(obj) { return obj.productionYear===Number(val.Year)});\n    \n setFilteredMovies(filteredarray)\n\n\n}\n\n\nelse{\n  setFilteredMovies(items)\n\n\n  \n}\n\n\n\n\n\n\n}\n \n\n let moviearray;\n{itemclicked ? moviearray=filteredMovies : moviearray=items} // rendering based on search\n\nif(moviearray.length>0)\n{\nvar listItems = moviearray.map((item,index) =>\n\n \n<div key={index} className=\"App\">\n\n {/* <Card  as=\"a\"  border=\"primary\" style={{ width: '14rem', height: '22rem',cursor:\"pointer\" } } onClick={()=> handleClick(index,moviearray)}>  */}\n{/* \n <Card.Img variant=\"top\" src={process.env.PUBLIC_URL + \"/images/\"+ item.image}/>  */}\n\n <img src={process.env.PUBLIC_URL + \"/images/\"+ item.image} alt=\"movies\" onClick={()=> handleClick(index,moviearray)}/> \n\n\n</div>\n\n \n  );\n}\nelse if(error)\n{\n  setError(error)\n}\n\nelse \n{\n   listItems =<div><p>\"No match found \"</p></div>\n}\n\nconst getMovieRequest = async () => {\n  const url = \"https://sometimes-maybe-flaky-api.gdshive.io/\";\ntry{\n  const response = await fetch(url);\n // console.log(response)\n  const result = await response.json();\n  //console.log(result)\n  setIsLoaded(true);\n  setItems(result);\n}\n\ncatch(err)\n{\n  setIsLoaded(true);\n  setError('An unexpected error occured.')\n \n}\n};\n\nuseEffect(() => {\n  getMovieRequest();\n}, []);\n\n\n\n\n \n  if (error) {\n    return <div>Error: {error}</div>;\n  }\n  else if (!isLoaded) {\n    return <div> <h2>Loading...</h2></div>;\n  }\n\n\n  return (\n    \n<div className=\"Navbar\">\n<h1>Trending Movies</h1>\n<SearchBar handleChange={handleChange}\n  handleSearch={handleSearch}\n/>\n\n{listItems}\n\n\n\n</div>\n\n\n  \n  );\n}\n\nexport default  App;\n","import React from \"react\";\r\nimport {Route,BrowserRouter as Router,Switch } from \"react-router-dom\";\r\nimport Details from './Details';\r\nimport App from './App';\r\nconst Routes = () => {\r\n    console.log(\"inside route\")\r\n  \r\n    return (\r\n       \r\n       \r\n   //setting the Routes     \r\n       <Router>\r\n <Switch>\r\n<Route path='/details' component={Details} />\r\n <Route path='/' component={App} />\r\n</Switch>\r\n</Router>\r\n         \r\n\r\n    \r\n    )\r\n}\r\n\r\nexport default Routes;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Routes from './Routes'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n  \n  \n   \n    <Routes />\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}