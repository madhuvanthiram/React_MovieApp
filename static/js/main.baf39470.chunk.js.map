{"version":3,"sources":["Details.jsx","App.js","Routes.jsx","reportWebVitals.js","index.js"],"names":["Details","props","history","useHistory","movieitemlist","useLocation","state","className","Button","variant","style","margin","onClick","push","Table","striped","bordered","hover","responsive","size","name","synopsisShort","productionYear","genre","synopsis","App","moviearray","useState","items","setItems","filteredMovies","setFilteredMovies","error","setError","itemclicked","setItemClicked","val","setval","handleChange","e","target","value","listItems","map","item","index","Card","as","border","width","cursor","types","handleClick","Header","image","Body","Title","getMovieList","a","fetch","then","res","json","result","useEffect","message","Form","Group","controlId","Label","Control","onChange","Year","Genre","filteredarray","_","filter","obj","Number","Routes","console","log","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.baf39470.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './App.css';\r\nimport { Button } from 'react-bootstrap';\r\nimport {useHistory,useLocation} from \"react-router-dom\";\r\nimport Table from 'react-bootstrap/Table';\r\nconst Details = (props) => {\r\n \r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const movieitemlist = location.state.movieitemlist; // to get the details of movie that is clicked\r\n   \r\n  \r\n\r\n \r\n\r\n    const Home = () =>\r\n    {   \r\n   \r\n\r\n        history.push('/')\r\n   \r\n\r\n    }\r\n    return (\r\n       \r\n\r\n        <div className=\"MovieList\">\r\n        \r\n      \r\n        <Button variant=\"primary\"style={{margin:'20px'}} onClick={Home}>Home</Button> \r\n        \r\n\r\n<Table striped bordered hover responsive=\"sm\" size=\"sm\">\r\n  <thead>\r\n  \r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n     \r\n      <td><b>Name</b></td>\r\n      <td>{movieitemlist.name}</td>\r\n     \r\n    </tr>\r\n    <tr>\r\n     \r\n      <td><b>Short Synopsis</b></td>\r\n      <td>{movieitemlist.synopsisShort}</td>\r\n     \r\n    </tr>\r\n    <tr>\r\n      <td><b>Year</b></td>\r\n      <td>{movieitemlist.productionYear}</td>\r\n    </tr>\r\n    <tr>\r\n      <td><b>Genre</b></td>\r\n      <td>{movieitemlist.genre}</td>\r\n     \r\n    </tr>\r\n    <tr>\r\n      <td><b>Synopsis</b></td>\r\n      <td>{movieitemlist.synopsis}</td>\r\n     \r\n    </tr>\r\n  </tbody>\r\n</Table>\r\n      \r\n\r\n\r\n\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Details;","\nimport './App.css';\nimport React, { useState } from 'react';\nimport {useEffect} from 'react';\nimport { useHistory} from \"react-router-dom\";\nimport Form from 'react-bootstrap/Form'\nimport _ from 'lodash';\nimport Card from 'react-bootstrap/Card';  \nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Button from 'react-bootstrap/Button';\n\n\n\nconst App=()=> {\n  const [items, setItems] = useState([]);//list of movies from the API\n  const [filteredMovies, setFilteredMovies] =useState([]);//filtered movie list\n  const [error, setError] = useState(null);\n  const [itemclicked, setItemClicked] = useState(false);//for conditioonal rendering\n  const [val, setval] = useState(\"\");//for search criteria\n \n \n  const history = useHistory();\n\n  const handleClick = (index,types) =>\n  {   \n    \n    \nhistory.push('/details',{movieitemlist:types[index]});// pass the movie list as props \n\n  }\n  const handleChange = (e) => // for search criteria\n  {\n  \n   \n    setval(val => ({...val, [e.target.name]: e.target.value}));//merge the values using spread operator in hook\n     \n\n    \n  }\n  \n  const handleSearch=(e)=>//trigerred when search button is clicked\n  {  \n    \n    setItemClicked(true); \n\n    //using lodash to get the filterd movie based on  search criteria\nif((val.Year) && (val.Genre))\n{\n  var filteredarray = _.filter(items, function(obj) { return obj.productionYear===Number(val.Year) && obj.genre===(val.Genre )});\n \n  setFilteredMovies(filteredarray)\n}\n\nelse if(val.Genre)\n{\n  var filteredarray = _.filter(items, function(obj) {return obj.genre===(val.Genre )});\n \n     setFilteredMovies(filteredarray)\n}\n\nelse if(val.Year)\n{\n  var filteredarray = _.filter(items, function(obj) { return obj.productionYear===Number(val.Year)});\n    \n \n setFilteredMovies(filteredarray)\n\n}\nelse{\n  setFilteredMovies(items)\n  \n}\n\n\n}\n \n\n let moviearray;\n{itemclicked ? moviearray=filteredMovies : moviearray=items} // rendering based on search\n\n \nconst listItems = moviearray.map((item,index) =>\n \n<div key={index} className=\"App\">\n\n <Card  as=\"a\"  border=\"primary\" style={{ width: '18rem',cursor:\"pointer\" } } onClick={()=> handleClick(index,moviearray)}> \n\n\n    <Card.Header key={index}>{item.image}</Card.Header>\n    <Card.Body>\n\n      <Card.Title>{item.name}</Card.Title>  \n    </Card.Body>\n  </Card> \n\n \n  <br />\n  \n\n</div>\n \n  );\n\n\n\n  \n\tconst getMovieList = async () => {\n\t  fetch(\"https://sometimes-maybe-flaky-api.gdshive.io/\")\n  .then(res => res.json())\n     .then(\n\n       (result) => {\n         \n         setItems(result); // set result array\n         \n        },\n   \n       (error) => {\n       \n          \n       setError(error);\n        \n    }\n\t\t\n\t)\n  }\n\n  useEffect(() => {\n\t\tgetMovieList();\n\t}, []);\n \n  if (error) {\n    \n    return <div><h2>Error: {error.message}</h2></div>;\n  }\n  \n\n  return (\n    \n  \n\n    <div>\n    \n\n<div>\n<ul className=\"Navbar\">\n\n<h1> Trending Movies</h1>\n\n<li><Form className=\"Dropdown\" >\n<Form.Group controlId=\"yearId\">\n    <Form.Label>Select Year</Form.Label> \n    <Form.Control as=\"select\"  name=\"Year\" onChange={handleChange}   >\n <option></option>\n      <option>2020</option>\n      <option>2019</option>\n      <option>2018</option>\n      <option>2017</option>\n      <option>2016</option>\n      <option>2015</option>\n      <option>2014</option>\n      <option>2013</option>\n      <option>2012</option>\n      <option>2011</option>\n      <option>2010</option>\n      <option>2009</option>\n      <option>2008</option>\n      <option>2007</option>\n      <option>2006</option>\n      <option>2005</option>\n      <option>2004</option>\n      <option>2003</option>\n      <option>2002</option>\n      <option>2001</option>\n      <option>2000</option>\n     \n    </Form.Control>\n  \n  </Form.Group>\n\n<Form.Group controlId=\"GenreId\" >\n    <Form.Label>Select Genre</Form.Label> \n    <Form.Control as=\"select\"  name=\"Genre\" onChange={handleChange} >\n   \n    <option></option>\n      <option>Action</option>\n      <option>Fantasy</option>\n      <option>Animation</option>\n      <option>Comedy</option>\n      <option>Adventure</option>\n    </Form.Control>\n  </Form.Group>\n  <Button variant=\"primary\" onClick={handleSearch}>\n    Search\n  </Button>\n</Form>\n\n</li>\n\n\n<li>{listItems}</li>\n</ul>\n\n\n\n\n</div>\n\n </div>\n  \n  );\n}\n\nexport default  App;\n","import React from \"react\";\r\nimport {Route,BrowserRouter as Router,Switch } from \"react-router-dom\";\r\nimport Details from './Details';\r\nimport App from './App';\r\nconst Routes = () => {\r\n    console.log(\"inside route\")\r\n  \r\n    return (\r\n       \r\n       \r\n   //setting the Routes     \r\n       <Router>\r\n <Switch>\r\n<Route path='/details' component={Details} />\r\n <Route path='/' component={App} />\r\n</Switch>\r\n</Router>\r\n         \r\n\r\n    \r\n    )\r\n}\r\n\r\nexport default Routes;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Routes from './Routes'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n  \n  \n   \n    <Routes />\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}